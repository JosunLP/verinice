<?xml version="1.0" encoding="UTF-8"?>
<!-- ====================================================================== 
     project  verinice rcptt tests  
     description: prepares and executes rcptt tests for verinice

     (c) 2018-2019 urszeidler
     ====================================================================== -->
<project name="rcptt-project" default="init.dev.enviorment" basedir="../">
	<property name="runner-project-path" value="${basedir}/gui-test-runner"/>
	
	<available file="${runner-project-path}/local/gui-test.properties" property="local-suffix" value="/local"/>
	<condition property="local-suffix" value="">
		<not>
			<available file="${runner-project-path}/local/gui-test.properties" />
		</not>
	</condition>
	
	<property name="gui-test-properties" value="${runner-project-path}${local-suffix}/gui-test.properties" />
	<property environment="env"/>
	<loadproperties srcfile="${gui-test-properties}" />
	<!-- Set properties below -->

	<property name="verinice.test.path" location="${basedir}/verinice-gui-tests" />
	<property name="org-wrks-path" location="${runner-project-path}/wrks" />

	<property name="test-data" location="${runner-project-path}/test-data" />
	<!-- result dirs -->
	<property name="test-results" location="${runner-project-path}/result" />
	<property name="images" value="${test-results}/screen-shot-images" />
	<property name="reports" value="${test-results}/reports" />
	<property name="log" value="${test-results}/log" />
	<property name="junit-report" location="${test-results}/results.xml" />
	<property name="html-report" location="${test-results}/results.html" />
	<property name="auts" location="${test-results}/aut" />
	<property name="v-designer-aut-path" location="${auts}/v.Designer" />
	<!-- workspaces -->
	<property name="wrks-path" location="${test-results}/wrks" />
	<property name="runner-workspace" location="${wrks-path}/runner-workspace" />
	<property name="verinice-aut-workspace" location="${wrks-path}/aut-workspace-" />
	<property name="v-designer-aut-workspace" location="${wrks-path}/v-designer-aut-workspace-" />
	<property name="verinice-workspace" location="${wrks-path}/verinice-workspace" />
	<property name="verinice-sever-workspace" location="${wrks-path}/aut-server-workspace-" />
	<property name="aut-stdout" location="${log}/aut-out-" />
	<property name="server-work-dir" location="${wrks-path}/tomcat" />
	<property name="server.test.url" value="http://${server-host}:${server-port}/verinice" />

	<condition property="isWindows" value="true">
		<os family="windows" />
	</condition>
	<condition property="isLinux" value="true">
		<os family="unix" name="Linux" />
	</condition>
	<condition property="isMac" value="true">
	  <os family="mac" />
	</condition>
	<condition property="no-war-copy">
		<isset property="no-server-deployment"/>
	</condition>
	<condition property="no-melody">
		<not><isset property="env.MELODY_TOOL_PATH"/></not>
	</condition>

	<!-- set up OS-specific paths -->
	<target name="setupPathsLinux" if="isLinux">
		<property name="verinice-directory-name" value="verinice" />
		<property name="verinice-executable" value="verinice" />
		<property name="verinice-ini-location" value="verinice.ini" />
		<property name="verinice-plugins-location" value="plugins" />
		<property name="verinice-plugins-location-relative-from-executable" value="plugins" />
		<property name="java-library-location" value="lib/server/libjvm.so" />
		<property name="java-binary-location" value="bin/java" />
	</target>
	<target name="setupPathsWindows" if="isWindows">
		<property name="verinice-directory-name" value="verinice" />
		<property name="verinice-executable" value="verinice.exe" />
		<property name="verinice-ini-location" value="verinice.ini" />
		<property name="verinice-plugins-location" value="plugins" />
		<property name="verinice-plugins-location-relative-from-executable" value="plugins" />
		<property name="java-library-location" value="bin/server/jvm.dll" />
		<property name="java-binary-location" value="bin/java.exe" />
	</target>
	<target name="setupPathsMac" if="isMac">
		<property name="verinice-directory-name" value="verinice.app" />
		<property name="verinice-executable" value="Contents/MacOS/verinice" />
		<property name="verinice-ini-location" value="Contents/Eclipse/verinice.ini" />
		<property name="verinice-plugins-location" value="Contents/Eclipse/plugins" />
		<property name="verinice-plugins-location-relative-from-executable" value="../Eclipse/plugins" />
		<property name="java-library-location" value="lib/libjli.dylib" />
		<property name="java-binary-location" value="bin/java" />
	</target>
	<target name="setupPaths" depends="setupPathsLinux, setupPathsWindows, setupPathsMac">
		<property name="verinice-aut-path" location="${auts}/${verinice-directory-name}" />
	</target>
    <target name="patch-properties">
        <replace file="${server-work-dir}/verinice/WEB-INF/veriniceserver-plain.properties.local" summary="true">
            <replacefilter token="# jdbc.url=jdbc:postgresql://127.0.0.1:5432/verinicedb" 
					value="jdbc.url=${server-database-url}" />
        	<replacefilter token="# admin.username=admin" value="admin.username=verinice"/>
        	<replacefilter token="# veriniceserver.grundschutzKataloge=/WEB-INF/it-grundschutz_el14_html_de.zip" 
        		value="veriniceserver.grundschutzKataloge=file:${test-data}/it-grundschutz_el14_html_de.zip"/>
        </replace>
        <replace file="${server-work-dir}/verinice/WEB-INF/classes/log4j.xml" summary="true">
            <replacefilter token="${catalina.home}/logs/verinice-server.log" 
					value="${log}/verinice-server.log" />
        </replace>
        <replace file="${server-work-dir}/conf/logging.properties" summary="true">
            <replacefilter token="${catalina.base}/logs" 
					value="${log}" />
        </replace>
    </target>
    <target name="patch-server-melody" unless="no-melody">
        <replace file="${server-work-dir}/verinice/WEB-INF/web.xml" summary="true">
            <replacetoken><![CDATA[<!-- classpath:sernet/gs/server/spring/veriniceserver-security-plain-ldap.xml -->]]></replacetoken>
            <replacevalue>
                <![CDATA[
                <filter>
                    <filter-name>javamelody</filter-name>
                    <filter-class>net.bull.javamelody.MonitoringFilter</filter-class>
                    <async-supported>true</async-supported>
                </filter>
                <filter-mapping>
                    <filter-name>javamelody</filter-name>
                    <url-pattern>/*</url-pattern>
                    <dispatcher>REQUEST</dispatcher>
                    <dispatcher>ASYNC</dispatcher>
                </filter-mapping>
                <listener>
                    <listener-class>net.bull.javamelody.SessionListener</listener-class>
                </listener>
                <!-- Spring context loader -->]]></replacevalue>
    </replace>
    	
        <replace file="${server-work-dir}/verinice/WEB-INF/web.xml" summary="true">
            <replacetoken><![CDATA[classpath:sernet/gs/server/spring/veriniceserver-security.xml]]></replacetoken>
            <replacevalue>
                <![CDATA[classpath:net/bull/javamelody/monitoring-spring-datasource.xml
                classpath:sernet/gs/server/spring/veriniceserver-security.xml

            	]]></replacevalue>
    	

    </replace>

    
    <copy todir="${server-work-dir}/verinice/WEB-INF/lib/">
        <fileset dir="${env.MELODY_TOOL_PATH}"/>	
    </copy>
    </target>
     <!-- - - - - - - - - - - - - - - - - - 
          target: patch-server-web-xml                      
         - - - - - - - - - - - - - - - - - -->
    <target name="patch-server-web-xml">
        <replace file="${server-work-dir}/verinice/WEB-INF/web.xml" summary="true">
            <replacefilter token="classpath:sernet/gs/server/spring/veriniceserver-security-plain-internal.xml" 
                value="classpath:sernet/gs/server/spring/veriniceserver-security-preauth.xml" />
        </replace>

        <replace file="${server-work-dir}/verinice/WEB-INF/web.xml" summary="true">
            <replacetoken><![CDATA[<!-- JSF and PrimeFaces config -->]]></replacetoken>
            <replacevalue>
                <![CDATA[
            <context-param>
                <param-name>iv-user</param-name>
                <param-value>verinice</param-value>
            </context-param>
            <!-- JSF and PrimeFaces config -->]]></replacevalue>
    </replace>

    <replace file="${server-work-dir}/verinice/WEB-INF/web.xml" summary="true">
        <replacetoken><![CDATA[<listener-class>com.sun.faces.config.ConfigureListener</listener-class>
	</listener>]]></replacetoken>
    <replacevalue><![CDATA[<listener-class>com.sun.faces.config.ConfigureListener</listener-class>
    </listener>

    <filter>
        <filter-name>preauthMockFilter</filter-name>
        <filter-class>sernet.gs.server.security.PreAuthMockFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>preauthMockFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>]]></replacevalue>
</replace>
</target>

    <!-- - - - - - - - - - - - - - - - - - 
          target: patch-auth-default                      
         - - - - - - - - - - - - - - - - - -->
    <target name="patch-auth-default">
        <replace file="${server-work-dir}/verinice/WEB-INF/verinice-auth-default.xml" summary="true" >
       <replacetoken><![CDATA[<userprofile login="admin" origin="default">]]></replacetoken>
           <replacevalue><![CDATA[<userprofile login="verinice" origin="default">]]></replacevalue>
        </replace>
    </target>

    
<!-- - - - - - - - - - - - - - - - - - 
          target: copy.war.file                      
         - - - - - - - - - - - - - - - - - -->
<target name="copy.war.file" unless="no-war-copy" depends="find.current.war">
    <unzip dest="${server-work-dir}/verinice" src="${war-file}" />
    <mkdir dir="${server-work-dir}/verinice/WEB-INF/elasticsearch" />
    <mkdir dir="${server-work-dir}/verinice/WEB-INF/vnl" />

    <copy todir="${server-work-dir}">
        <fileset dir="${tomcat-dir}">
            <include name="conf/*.*" />
        </fileset>
    </copy>
    <echoxml file="${server-work-dir}/conf/server.xml">
<Server port="${server-shutdown-port}" shutdown="SHUTDOWN">

    <!--APR library loader. Documentation at /docs/apr.html -->
    <Listener SSLEngine="on" className="org.apache.catalina.core.AprLifecycleListener"/>
    <!-- Prevent memory leaks due to use of particular java/javax APIs-->
    <Listener className="org.apache.catalina.core.JreMemoryLeakPreventionListener"/>

    <Service name="Catalina">
        <Connector connectionTimeout="20000" port="${server-port}" protocol="HTTP/1.1" redirectPort="8443"/>
        <Engine defaultHost="localhost" name="Catalina">
            <Host appBase="webapps" autoDeploy="true" name="localhost" unpackWARs="true" xmlNamespaceAware="false" xmlValidation="false">
                <Context docBase="${server-work-dir}/verinice" path="/verinice" reloadable="true">
                	<Parameter name='javamelody.storage-directory' value='${server-work-dir}/javamelody' override='false'/>	
                </Context>
            </Host>
        </Engine>
    </Service>
</Server></echoxml>
	
    <antcall target="patch-properties" />
    <antcall target="patch-server-web-xml" />
    <antcall target="patch-auth-default"/>
	<antcall target="patch-server-melody"/>
</target>


<target name="start-tomcat-server" unless="no-server-deployment" depends="copy.war.file">
	<echo>
catalina.home : ${tomcat-dir}
catalina.base : ${server-work-dir}
	</echo>
	
    <java classname="org.apache.catalina.startup.Bootstrap" fork="true" spawn="true">
    	<classpath path="${tomcat-classpath}" />
        <jvmarg value="-Dcatalina.home=${tomcat-dir}" />
        <jvmarg value="-Dcatalina.base=${server-work-dir}" />
        <jvmarg value="--add-opens=java.base/java.lang=ALL-UNNAMED" />
    	<arg value="start"/>
    </java>

    <echo>wait for Tomcat server ${server.test.url}</echo>
    <waitfor maxwait="${verinice.timeout}" maxwaitunit="second" timeoutproperty="timeout">
        <http url="${server.test.url}" />
    </waitfor>
	<fail message="Failed to start verinice.PRO server">
	    <condition>
	      <not>
	        <http url="${server.test.url}" />
	      </not>
	    </condition>
	 </fail>
    <echo>Tomcat server started</echo>
	<copy file="${test-data}/MY_LIC.vnl" tofile="${server-work-dir}/verinice/WEB-INF/vnl/test-lic.vnl"/>
</target>

<target name="stop-tomcat-server" unless="no-server-deployment" depends="get-melody-report">
	<java classname="org.apache.catalina.startup.Bootstrap" fork="true">
		<classpath path="${tomcat-classpath}" />
		<jvmarg value="-Dcatalina.home=${tomcat-dir}" />
		<arg line="stop" />
	</java>
</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: get-melody-report                      
         - - - - - - - - - - - - - - - - - -->
    <target name="get-melody-report" unless="no-melody">
        <get ignoreerrors="true" src="${server.test.url}/monitoring?format=pdf" dest="${test-results}/server-monitor.pdf"/>
        <get ignoreerrors="true" src="${server.test.url}/monitoring?part=mbeans&amp;format=pdf" dest="${test-results}/server-monitor-mbeans.pdf"/>
        <get ignoreerrors="true" src="${server.test.url}/monitoring?part=database&amp;request=1&amp;format=pdf" dest="${test-results}/server-monitor-db-locks.pdf"/>
        <get ignoreerrors="true" src="${server.test.url}/monitoring?part=database&amp;request=5&amp;format=pdf" dest="${test-results}/server-monitor-db-tables.pdf"/>
        <get ignoreerrors="true" src="${server.test.url}/monitoring?part=database&amp;request=6&amp;format=pdf" dest="${test-results}/server-monitor-db-index.pdf"/>
        <get ignoreerrors="true" src="${server.test.url}/monitoring?part=database&amp;request=7&amp;format=pdf" dest="${test-results}/server-monitor-db-table-io.pdf"/>
        <get ignoreerrors="true" src="${server.test.url}/monitoring?part=database&amp;request=10&amp;format=pdf" dest="${test-results}/server-monitor-db-config.pdf"/>
    </target>


	<target name="init" depends="clean, configure.rcptt.runner, setupPaths">
		<mkdir dir="${test-results}" />
		<mkdir dir="${auts}" />
		<mkdir dir="${images}" />
		<mkdir dir="${log}" />
		<mkdir dir="${reports}" />

		<echo>
---
basedir     : ${basedir}
test        : ${verinice.test.path} 
result      : ${test-results} 
aut         : ${auts}
wrks        : ${wrks-path} 
v-wrk       : ${verinice-workspace}
a-wrk       : ${verinice-aut-workspace}
zip         : ${verinice.zip}
skip-tags   : ${skip-tags}	
runner-path : ${runner-path}
test-options: ${test-options}
lang        : ${verinice.lang}
---		
		</echo>
	</target>

	<target name="configure.rcptt.runner">
		<echo>Configure rcptt runner at ${runner-path}</echo>
		<path id="rcp-runner">
			<fileset dir="${runner-path}/plugins" >
				<include name="org.eclipse.equinox.launcher*" />
			</fileset>
		</path>

		<property name="e-runner" refid="rcp-runner"/>
		<basename property="erunner" file="${e-runner}"/>
		<echo>found erunner:  ${erunner}</echo>
	</target>
	
	<target name="configure.runners" >
		<echo>Configure verinice at ${verinice-aut-path}</echo>
		<path id="verinice-runner">
			<fileset dir="${verinice-aut-path}/${verinice-plugins-location}">
				<include name="org.eclipse.equinox.launcher_*.jar" />
			</fileset>
		</path>
		<property name="v-runner" refid="verinice-runner"/>
		<basename property="verinice.launcher" file="${v-runner}"/>
		<echo>found verinice.launcher:  ${verinice.launcher}</echo>

		<path id="verinice-starter">
			<dirset  dir="${verinice-aut-path}/${verinice-plugins-location}">
				<include name="org.eclipse.equinox.launcher.*" />
			</dirset>
		</path>
		<property name="v-launcher" refid="verinice-starter"/>
		<basename property="verinice.starter" file="${v-launcher}"/>
		<echo>found verinice.starter:  ${verinice.starter}</echo>
		
        <path id="verinice-jre">
            <dirset  dir="${verinice-aut-path}/${verinice-plugins-location}">
                <include name="org.eclipse.justj.openjdk.hotspot.jre*" />
            </dirset>
        </path>
        <property name="v-jre" refid="verinice-jre"/>
        <property name="verinice.jre" location="${v-jre}"/>
        <echo>found verinice.jre:  ${verinice.jre}</echo>
		
	</target>
	
	<!-- - - - - - - - - - - - - - - - - - 
          target: unzip.archive                      
         - - - - - - - - - - - - - - - - - -->
	<target name="unzip.v-designer.archive" depends="find.current.v-designer.zip">
		<echo>unzip ${v-designer.zip} to  ${auts}</echo>

		<exec executable="unzip">
			<arg line="-q -o ${v-designer.zip} -d ${auts}" />
		</exec>
		<antcall target="delete.zip"/>
		<copy todir="${test-results}/wrks" verbose="false">
			<fileset dir="${org-wrks-path}">
				<include name="**/*.*" />
			</fileset>
		</copy>
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: delete.zip                      
         - - - - - - - - - - - - - - - - - -->
	<target name="delete.v-designer.zip" unless="no-zip-delete">
		<delete file="${v-designer.zip}" />
	</target>


    <!-- - - - - - - - - - - - - - - - - - 
          target: find.current.zip                      
         - - - - - - - - - - - - - - - - - -->
    <target name="find.current.v-designer.zip" unless="v-designer.zip">
        <path id="v-designer-zip-file">
            <fileset dir="${basedir}">
                <include name="${v-designer.zip.selector}" />
            </fileset>
        </path>

        <pathconvert targetos="unix" property="v-designer.zip" refid="v-designer-zip-file"/>

        <echo>found:  ${v-designer.zip}</echo>
    </target>

    <!-- - - - - - - - - - - - - - - - - - 
          target: find.current.war                      
         - - - - - - - - - - - - - - - - - -->
    <target name="find.current.war" unless="war-file">
        <path id="war-file-1">
            <fileset dir="${basedir}">
                <include name="${war.file.selector}" />
            </fileset>
        </path>

        <pathconvert targetos="unix" property="war-file" refid="war-file-1"/>

        <echo>found:  ${war-file}</echo>
    </target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: unzip.archive.linux                      
         - - - - - - - - - - - - - - - - - -->
	<target name="unzip.archive.linux" depends="find.current.zip" unless="isWindows">
		<echo>unzip ${verinice.zip} to  ${auts}</echo>

		<exec executable="unzip">
			<arg line="-q -o ${verinice.zip} -d ${auts}" />
		</exec>
		<antcall target="delete.zip" />
		<copy todir="${test-results}/wrks" verbose="false">
			<fileset dir="${org-wrks-path}">
				<include name="**/*.*" />
			</fileset>
		</copy>
	</target>

	<target name="unzip.archive.windows" depends="find.current.zip" if="isWindows">
		<echo>unzip ${verinice.zip} to  ${auts}</echo>
		<unzip src="${verinice.zip}" dest="${auts}" />
		<antcall target="delete.zip" />
		<copy todir="${test-results}/wrks" verbose="false">
			<fileset dir="${org-wrks-path}">
				<include name="**/*.*" />
			</fileset>
		</copy>
	</target>

	<target name="copy.workspace">
		<copy todir="${test-results}/wrks" verbose="false">
			<fileset dir="${org-wrks-path}">
				<include name="**/*.*" />
			</fileset>
		</copy>
	</target>
	
	<!-- - - - - - - - - - - - - - - - - - 
          target: delete.zip                      
         - - - - - - - - - - - - - - - - - -->
	<target name="delete.zip" unless="no-zip-delete">
		<delete file="${verinice.zip}" />
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: find.current.zip                      
         - - - - - - - - - - - - - - - - - -->
	<target name="find.current.zip" unless="verinice.zip">
		<path id="verinice-zip-file">
			<fileset dir="${basedir}">
				<include name="${verinice.zip.selector}" />
			</fileset>
		</path>

		<pathconvert targetos="unix" property="verinice.zip" refid="verinice-zip-file"/>
		<echo>found:  ${verinice.zip}</echo>
	</target>



	<!-- ================================= 
          target: clean              
         ================================= -->
	<target name="clean" unless="no-clean" description="clean the resources">
		<delete dir="${test-results}" quiet="true" />
	</target>


	<!-- - - - - - - - - - - - - - - - - - 
          target: configure-aut                      
         - - - - - - - - - - - - - - - - - -->
	<target name="configure-aut">
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: configure-vdesigner-aut                      
         - - - - - - - - - - - - - - - - - -->
	<target name="configure-v-designer-aut" depends="unzip.v-designer.archive">
		<delete file="${v-designer-aut-path}/v-designer.ini" />
		<echo file="${v-designer-aut-path}/v-designer.ini">-startup
${verinice-plugins-location-relative-from-executable}/org.eclipse.equinox.launcher_${verinice.launcher.version}.jar
--launcher.library
${starterPlugin}
-data
workspace
-vmargs
-Xms256m
-Xmx2048m
-Dimage.folder=${images}
-Dimages=${images}
-Dbasepath=${test-results}
-Dtest-data=${test-data}
</echo>
	</target>


	<!-- ================================= 
          target: start.verinice.client              
         ================================= -->
	<target name="start.verinice.client" depends="configure.verinice" description="start a verinice instance">
		<echo>Start verinice: ${verince.program} on ${os.name}</echo>
		<exec executable="${verince.program}" dir="${verinice-aut-path}" spawn="true" vmlauncher="false"/>
		<echo>wait for verinice ...</echo>
		<waitfor maxwait="${verinice.timeout}" maxwaitunit="second" timeoutproperty="timeout">
			<http url="http://localhost:${verinice.server.port}/GetHitroConfig" />
		</waitfor>
		<fail message="Failed to start verinice instance">
		    <condition>
		      <not>
		        <http url="http://localhost:${verinice.server.port}/GetHitroConfig" />
		      </not>
		    </condition>
		 </fail>
	</target>


	<!-- - - - - - - - - - - - - - - - - - 
          target: configure.verinice                      
         - - - - - - - - - - - - - - - - - -->
	<target name="configure.verinice" depends="unzip.archive.linux, unzip.archive.windows, configure.runners">
		<delete file="${verinice-aut-path}/${verinice-ini-location}" />
		<echo>${verinice-workspace}::${verinice-aut-path}</echo>
		<echo file="${verinice-aut-path}/${verinice-ini-location}">-startup
${verinice-plugins-location-relative-from-executable}/${verinice.launcher}
--launcher.library
${verinice-plugins-location-relative-from-executable}/${verinice.starter}
-nl
${verinice.lang}
-data
${verinice-workspace}
-debug
-consolelog
-vm
${verinice.jre}/jre/${java-library-location}
-vmargs
--add-opens=java.base/java.lang=ALL-UNNAMED
-Xms512m
-Xmx2048m
-Dorg.osgi.service.http.port=${verinice.server.port}
-Dorg.ops4j.pax.web.listening.addresses=localhost
-Dosgi.parentClassloader=ext
-Djavax.xml.soap.SOAPFactory=org.apache.axis.soap.SOAPFactoryImpl
-Djavax.xml.soap.MessageFactory=org.apache.axis.soap.MessageFactoryImpl
-Djavax.xml.soap.SOAPConnectionFactory=org.apache.axis.soap.SOAPConnectionFactoryImpl
-Dimages=${images}
-Dbasepath=${test-results}
-Dtest-data=${test-data}
-Dderby.locks.monitor=true
-Dderby.locks.deadlockTrace=true
-Djava.net.useSystemProxies=true
-Dverinice.debug_bp_risk_analysis_decorator=true
</echo>
	</target>

    <!-- - - - - - - - - - - - - - - - - - 
          target: starts the rcptt testrunner and executes all test not skipped by the skip-tags property
         - - - - - - - - - - - - - - - - - -->
	<target name="start-test-runner">
		<echo>  
		starting aut:${aut-path}
		Skipping    :${skip-tags}
		workspace   :${aut-workspace}
		</echo>

		<java jar="${runner-path}/plugins/${erunner}" fork="true">
			<arg value="-application" />
			<arg value="org.eclipse.rcptt.runner.headless" />

			<arg value="-data" />
			<arg value="${runner-workspace}" />

			<arg value="-aut" />
			<arg value="${aut-path}" />

			<arg value="-autArgs" />
			<arg value="'-nl;${verinice.lang}'" />

			<arg value="-autWsPrefix" />
			<arg value="${aut-workspace}" />

			<arg value="-autConsolePrefix" />
			<arg value="${aut-stdout}" />

			<arg value="-htmlReport" />
			<arg value="${html-report}" />

			<arg value="-junitReport" />
			<arg value="${junit-report}" />

			<arg value="-import" />
			<arg value="${test-path}" />

			<arg value="-skipTags" />
			<arg value="${skip-tags}" />

			<arg value="-testOptions" />
			<arg value="${test-options}" />

			<arg value="-memoryUsage" />
			<arg value="-reuseExistingWorkspace" />
		</java>
	</target>

    <!-- - - - - - - - - - - - - - - - - - 
          target: starts the rcptt testrunner and executes all test in the property test-list
         - - - - - - - - - - - - - - - - - -->
	<target name="start-test-runner-customtest" depends="configure.rcptt.runner">
		<echo>  
		starting aut:${aut-path}
		tests       :${test-list}
		workspace   :${aut-workspace}
		</echo>

		<java jar="${runner-path}/plugins/${erunner}" fork="true">
			<arg value="-application" />
			<arg value="org.eclipse.rcptt.runner.headless" />

			<arg value="-data" />
			<arg value="${runner-workspace}" />

			<arg value="-aut" />
			<arg value="${aut-path}" />

			<arg value="-autArgs" />
			<arg value="'-nl;${verinice.lang}'" />

			<arg value="-autWsPrefix" />
			<arg value="${aut-workspace}" />

			<arg value="-autConsolePrefix" />
			<arg value="${aut-stdout}" />

            <arg value="-skipTags" />
            <arg value="${skip-tags}" />

			<arg value="-htmlReport" />
			<arg value="${html-report}" />

			<arg value="-junitReport" />
			<arg value="${junit-report}" />

			<arg value="-import" />
			<arg value="${test-path}" />

			<arg value="-tests" />
			<arg value="${test-list}" />

			<arg value="-testOptions" />
			<arg value="${test-options}" />

			<arg value="-memoryUsage" />
			<arg value="-reuseExistingWorkspace" />
		</java>
	</target>

    <!-- ================================= 
          target: test-verinice-server              
         ================================= -->
    <target name="test-verinice-server-test-custom" depends="init, start-tomcat-server" description="Deploys the webapp, start the server and the client.">
		<run-server-tests target="start-test-runner-customtest"/>
    </target>
	
    <!-- ================================= 
          target: test-verinice-server              
         ================================= -->
    <target name="test-verinice-server" depends="init, start-tomcat-server" description="Deploys the webapp, start the server and the client.">
		<run-server-tests target="start-test-runner"/>
    </target>

	<macrodef name="run-server-tests">
		<attribute name="target" />
		<sequential>
			<echo>running server tests with target: @{target}</echo>
			<property name="mode" value="Server"/>
	        <antcall target="configure.verinice" />
	        <antcall target="configure-aut" />
	        <echo file="${verinice-sever-workspace}/.metadata/.plugins/org.eclipse.core.runtime/.settings/sernet.gs.ui.rcp.main.prefs" >
	eclipse.preferences.version=1
	cna_derbywarning=false
	gs_cna_vnserver_uri=${server.test.url}
	gs_cna_operationmode=gs_cna_operationmode_withserver
	</echo>
			<!--
				RCPTT expects that the vm parameter points to the binary, not the shared lib
				https://bugs.eclipse.org/bugs/show_bug.cgi?id=515501.
			 -->
			<replace file="${verinice-aut-path}/${verinice-ini-location}" token="${java-library-location}" value="${java-binary-location}"/>
            <antcall target="@{target}">
	            <param name="aut-path" value="${verinice-aut-path}" />
	            <param name="aut-workspace" value="${verinice-sever-workspace}" />
	            <param name="test-path" value="${verinice.test.path}" />
	        </antcall>
	        <antcall target="stop-tomcat-server"/>
	    	<antcall target="move.log.files">
	    		<param name="aut-workspace" value="${verinice-sever-workspace}" />
	    	</antcall>
			</sequential>
		</macrodef>
			
			
	<macrodef name="run-client-tests">
		<attribute name="target" />
		<sequential>
			<echo>running client tests with target: @{target}</echo>
            <property name="mode" value="Client"/>
			<property name="verince.program" location="${verinice-aut-path}/${verinice-executable}" />

			<antcall target="configure-aut" />
			<antcall target="start.verinice.client" />
			<!--
				RCPTT expects that the vm parameter points to the binary, not the shared lib
				https://bugs.eclipse.org/bugs/show_bug.cgi?id=515501.
			 -->
			<replace file="${verinice-aut-path}/${verinice-ini-location}" token="${java-library-location}" value="${java-binary-location}"/>
			<antcall target="@{target}">
				<param name="aut-path" value="${verinice-aut-path}" />
				<param name="aut-workspace" value="${verinice-aut-workspace}" />
				<param name="test-path" value="${verinice.test.path}" />
			</antcall>
			<antcall target="move.log.files">
				<param name="aut-workspace" value="${verinice-aut-workspace}" />
			</antcall>
		</sequential>
	</macrodef>
	
	
<!-- ================================= 
          target: test-verinice-client              
         ================================= -->
	<target name="test-verinice-client" depends="init" description="Runs the gui tests for verinice in client mode.">
		<run-client-tests target="start-test-runner" />
	</target>

	<!-- ================================= 
          target: test-verinice-client              
         ================================= -->
	<target name="test-verinice-client-test-custom" depends="init" description="Runs the gui tests for verinice only executes the tests in the test-list property.">
		<run-client-tests target="start-test-runner-customtest"/>
	</target>

	<!-- ================================= 
          target: test-v-designer             
         ================================= -->
	<target name="test-v-designer" depends="init" description="Runs the gui tests for v-designer.">
		<property name="verince.program" location="${verinice-aut-path}/verinice" />

		<antcall target="configure-v-designer-aut">
		</antcall>
		<antcall target="start.verinice.client">
		</antcall>
		<antcall target="start-test-runner">
			<param name="aut-path" value="${v-designer-aut-path}" />
			<param name="aut-workspace" value="${v-designer-aut-workspace}" />
			<param name="test-path" value="${v-designer.test.path}" />
		</antcall>
	</target>


	<!-- ================================= 
          target: move.log.files              
         ================================= -->
	<target name="move.log.files" description="Copy the logfiles to the log dir.">
		<fileset dir="${verinice-workspace}/log" id="verinice-logs">
			<include name="*.log*" />
		</fileset>
		<fileset dir="${verinice-workspace}/.metadata" id="verinice-app-logs">
			<include name="*.log*" />
		</fileset>
		<fileset dir="${aut-workspace}/log" id="verinice-aut-logs">
			<include name="*.log*" />
		</fileset>
		<fileset dir="${aut-workspace}/.metadata" id="verinice-app-aut-logs">
			<include name="*.log*" />
		</fileset>
		<fileset dir="${runner-workspace}/.metadata" id="erunner-logs">
			<include name="*.log*" />
		</fileset>

		<move todir="${log}/verinice" failonerror="false">
			<fileset refid="verinice-logs" />
			<fileset refid="verinice-app-logs" />
		</move>
		<move todir="${log}/verinice-aut" failonerror="false">
			<fileset refid="verinice-aut-logs" />
			<fileset refid="verinice-app-aut-logs" />
		</move>
		<move todir="${log}/erunner" failonerror="false">
			<fileset refid="erunner-logs" />
		</move>
		<antcall target="fix-junit-result-xml"/>
		<antcall target="fix-metric-csv"/>
		<delete dir="${auts}" failonerror="false"/>
		<delete dir="${runner-workspace}" failonerror="false" />
		<delete dir="${wrks-path}" failonerror="false" />
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: initalize.verinice                      
         - - - - - - - - - - - - - - - - - -->
	<target name="initalize.verinice" depends="init">
		<delete dir="${verinice-workspace}" />
		<mkdir dir="${verinice-workspace}" />
		<antcall target="start.verinice.client" />
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: fix-junit-result-xml                      
         - - - - - - - - - - - - - - - - - -->
    <target name="fix-junit-result-xml">
    	<replaceregexp file="${test-results}/results.junit.xml" flags="g"
    		match='testcase[ \n\r\t]name="([^"]*)"'
    		replace='testcase classname="${os.name}${mode}TEST" name="\1"' 	/>
    </target>

    <target name="fix-metric-csv">
    	<concat destfile="${test-results}/performance-metric.csv" append="true">
    		<fileset dir="${test-results}" includes="*.csv" />
    	<filterchain>
     	   <replaceregex pattern=".*name:" replace="" />
      	   <replaceregex pattern="duration:" replace="" />
      	   <replaceregex pattern="\)" replace="" />
    	   </filterchain>
    	</concat>
        <condition property="no-metric">
            <not>
                <available file="${test-results}/performance-metric.csv" />
            </not>
        </condition>
        <antcall target="process-metric" />
    </target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: process-metric                      
         - - - - - - - - - - - - - - - - - -->
    <target name="process-metric" unless="no-metric">
           <exec executable="${runner-project-path}/etc/scripts/process-metric.sh"/> 
    </target>


	<!-- ================================= 
          target: init.dev.enviorment              
         ================================= -->
	<target name="init.dev.enviorment" depends="init" description="Creates the inital workspace and some startconfigs.">
		<fileset id="lauchconfigs" dir="${runner-project-path}/etc/launchconfig">
			<include name="**/*.launch.template" />
		</fileset>

		<property name="local.path" value="${runner-project-path}/local" />
		<mkdir dir="${local.path}" />

		<copy todir="${local.path}">
			<fileset refid="lauchconfigs" />
			<globmapper from="*.launch.template" to="*.launch" />
		</copy>
		
		<copy file="${runner-project-path}/gui-test.properties" tofile="${local.path}/gui-test.properties" overwrite="false" />
		<antcall target="copy.workspace" />
	</target>
</project>